{"version":3,"sources":["components/foods/foods.style.ts","components/foods/foods.tsx","Theme/index.tsx","Theme/theme.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Wrapper","styled","div","FoodItem","food","src","imageData","alt","foodName","liked","Button","size","disableElevation","variant","defaultMode","ManageThemeContext","createContext","mode","toggle","ThemeManager","children","useState","themeState","setThemeState","Provider","value","backgroundColor","theme","light","dark","textColor","buttonBackgroundColor","buttonTextColor","themeConf","button","getFoods","a","fetch","json","App","React","useContext","useQuery","data","isLoading","error","console","log","LinearProgress","className","onClick","Grid","container","spacing","map","item","xs","sm","id","client","QueryClient","ReactDOM","render","QueryClientProvider","document","getElementById"],"mappings":"wMAEaA,EAAUC,IAAOC,IAAV,uX,gCCwBLC,EAjBmB,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OAChC,eAACJ,EAAD,WACE,qBAAKK,IAAKD,EAAKE,UAAWC,IAAKH,EAAKI,WACpC,gCACE,6CAAgBJ,EAAKI,YACrB,wCAAWJ,EAAKK,SAChB,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,kBAAgB,EAChBC,QAAQ,YAHV,SAKE,cAAC,IAAD,a,wBCjBFC,EAAc,QAEPC,EAAkDC,wBAAc,CAC3EC,KAAMH,EACNI,OAAQ,eAKGC,EAAyB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAClBC,mBAAS,CAC3CJ,KAAMH,IAF8C,mBAC/CQ,EAD+C,KACnCC,EADmC,KAStD,OACE,cAACR,EAAmBS,SAApB,CAA6BC,MAAO,CAClCR,KAAMK,EAAWL,KACjBC,OAPW,WACbK,EAAc,CAAEN,KAA2B,SAApBK,EAAWL,KAAX,mBAIvB,SAIGG,K,iCCxBMM,EAAkCC,IAAM,OAAQ,CAC3DC,MAAO,UACPC,KAAM,YAGKC,EAA4BH,IAAM,OAAQ,CACrDC,MAAO,UACPC,KAAM,YAGKE,EAAwBJ,IAAM,OAAQ,CACjDC,MAAO,OACPC,KAAM,SAGKG,EAAkBL,IAAM,OAAQ,CAC3CC,MAAO,OACPC,KAAM,SCfK7B,EAAUC,IAAOC,IAAV,oOAEE+B,EACXA,GASEvB,EAAST,IAAOiC,OAAV,iMACHD,EAILA,GCFLE,EAAQ,uCAAG,sBAAAC,EAAA,sEACMC,MAAM,mDADZ,8BACiEC,OADjE,mFAAH,qDAuCCC,EAnCO,WACpB,IAAMZ,EHdsBa,IAAMC,WAAW1B,GGanB,EAGS2B,YACjC,QACAP,GAFMQ,EAHkB,EAGlBA,KAAMC,EAHY,EAGZA,UAAWC,EAHC,EAGDA,MAMzB,OAFAC,QAAQC,IAAIJ,GAETE,EAAc,iDACdD,EAAkB,cAACI,EAAA,EAAD,IAGnB,cAAC,IAAD,CAAerB,MAAO,CAAEV,KAAMU,EAAMV,MAApC,SACE,eAAC,EAAD,WACE,qBAAKgC,UAAU,UAAf,SACA,cAAC,EAAD,CAAQC,QAAS,kBAAMvB,EAAMT,UAA7B,SACkB,SAAfS,EAAMV,KAAkB,aAAe,gBAI1C,cAACkC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,gBACGV,QADH,IACGA,OADH,EACGA,EAAMW,KAAI,SAAClD,GAAD,OACT,cAAC+C,EAAA,EAAD,CAAMI,MAAI,EAAeC,GAAI,GAAIC,GAAI,EAArC,SACE,cAAC,EAAD,CAAUrD,KAAMA,KADFA,EAAKsD,e,gBCzC3BC,EAAS,IAAIC,IAEnBC,IAASC,OACP,cAAC,EAAD,UACE,cAACC,EAAA,EAAD,CAAqBJ,OAAQA,EAA7B,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,W","file":"static/js/main.cbff4e7a.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  border: 1px solid;\n\n  img {\n    height: 250px;\n    width: 100%;\n    object-fit: cover;\n    border-bottom: 1px solid;\n  }\n\n  div {\n    font-family: Arial, Helvetica, sans-serif;\n    padding: 1rem;\n    height: 100%;\n  }\n`;","import {Foods} from '../../App';\nimport {Wrapper} from './foods.style';\nimport { Button } from '@material-ui/core';\nimport FavoriteTwoToneIcon from '@material-ui/icons/FavoriteTwoTone';\n\ninterface Props {\n  food: Foods;\n}\n\nconst FoodItem: React.FC<Props> = ({food}) => (\n  <Wrapper>\n    <img src={food.imageData} alt={food.foodName} />\n    <div>\n      <h3>Food Name: {food.foodName}</h3>\n      <p>Liked: {food.liked}</p>\n      <Button\n        size=\"small\"\n        disableElevation\n        variant=\"contained\"\n      >\n        <FavoriteTwoToneIcon />\n      </Button>\n    </div>\n  </Wrapper>\n);\n\nexport default FoodItem;","import React, {createContext, useState} from 'react';\nimport { ThemeContext } from './types';\n\nconst defaultMode = 'light';\n\nexport const ManageThemeContext: React.Context<ThemeContext> = createContext({\n  mode: defaultMode,\n  toggle: () => {}\n})\n\nexport const useTheme = () => React.useContext(ManageThemeContext);\n\nexport const ThemeManager: React.FC = ({ children }) => {\n  const [themeState, setThemeState] = useState({\n    mode: defaultMode\n  });\n\n  const toggle = (): void => {\n    setThemeState({ mode: (themeState.mode === 'dark' ? `light` : `dark`) });\n  }\n\n  return (\n    <ManageThemeContext.Provider value={{\n      mode: themeState.mode,\n      toggle: toggle\n    }}>\n      {children}\n    </ManageThemeContext.Provider>\n  );\n}","import theme from 'styled-theming';\n\nexport const backgroundColor: theme.ThemeSet = theme('mode', {\n  light: '#fafafa',\n  dark: '#0e0f11'\n});\n\nexport const textColor: theme.ThemeSet = theme('mode', {\n  light: '#191919',\n  dark: '#fafafa'\n});\n\nexport const buttonBackgroundColor = theme('mode', {\n  light: '#222',\n  dark: '#eee'\n});\n\nexport const buttonTextColor = theme('mode', {\n  light: '#eee',\n  dark: '#222'\n});","import styled from 'styled-components';\n// icons here\nimport * as themeConf from './Theme/theme';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  background-color: ${themeConf.backgroundColor};\n  color: ${themeConf.textColor};\n  text-align: center;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Button = styled.button`\n  background: ${themeConf.buttonBackgroundColor};\n  border: 1px solid;\n  border-radius: 0.3em;\n  box-shadow: none;\n  color: ${themeConf.buttonTextColor};\n  cursor: pointer;\n  font-size: 1em;\n  padding: 0.5em 1em;\n;`","import { useState } from 'react';\nimport { useQuery } from 'react-query';\n\nimport FoodItem from './components/foods/foods';\n\nimport { ThemeProvider } from 'styled-components';\nimport { useTheme } from './Theme';\nimport Grid from '@material-ui/core/Grid';\nimport { LinearProgress } from '@material-ui/core';\n// import {Button} from '@material-ui/core';\n\nimport {Wrapper, Button} from './App.styles';\nexport interface Foods {\n  id: number;\n  foodName: string;\n  liked: number;\n  imageData: string;\n}\n\nconst getFoods = async (): Promise<Foods[]> => {\n  return await (await (fetch('https://foodgenerateapi.herokuapp.com/api/foods'))).json();\n}\n\nconst App: React.FC = () => {\n  const theme = useTheme();\n\n  const { data, isLoading, error } = useQuery<Foods[]>(\n    'foods',\n    getFoods\n  )\n  console.log(data);\n\n  if(error) return <div>....error.....</div>\n  if(isLoading) return <LinearProgress />;\n  \n  return (\n    <ThemeProvider theme={{ mode: theme.mode }}>\n      <Wrapper>\n        <div className=\"buttons\">\n        <Button onClick={() => theme.toggle()}>\n          {theme.mode === 'dark' ? 'Light Mode' : 'Dark Mode'}\n        </Button>\n        </div>\n        \n        <Grid container spacing={3}>\n          {data?.map((food) => (\n            <Grid item key={food.id} xs={12} sm={4}>\n              <FoodItem food={food} />\n            </Grid>\n          ))}\n        </Grid>\n      </Wrapper>\n    </ThemeProvider>\n  );\n}\n\n\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { ThemeManager } from './Theme';\n\nconst client = new QueryClient();\n\nReactDOM.render(\n  <ThemeManager>\n    <QueryClientProvider client={client}>\n      <App />\n    </QueryClientProvider>\n  </ThemeManager>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}